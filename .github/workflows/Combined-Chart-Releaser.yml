name: API Gateway and Helm Chart Release Workflow

on:
  push:
    branches:
      - feature-update-istio-apigateway-2

concurrency:
  group: chart-release
  cancel-in-progress: false

jobs:
  release-charts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Configure Helm for general charts
        run: |
          # Add required Helm repositories
          helm repo add jetstack https://charts.jetstack.io
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add hashicorp https://helm.releases.hashicorp.com
          helm repo update
          
          # Update dependencies for cert-manager-init chart
          cd ./charts/cert-manager-init
          helm dependency update
          # Update dependencies for canvas-vault chart
          cd ../canvas-vault
          helm dependency update
          # Update dependencies for canvas-oda chart
          cd ../canvas-oda
          helm dependency update

      - name: Run chart-releaser for Helm Charts
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: ./charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Sleep for 60 seconds
        run: sleep 60

  delay-for-canvas-chart-release:
    runs-on: ubuntu-latest
    needs: release-charts
    steps:
      - name: Confirm new release was done properly
        run: |
          # Add the required Helm repository
          helm repo add oda-canvas-api-gateway https://rj-acc.github.io/oda-canvas-api-gateway
          helm repo update

          # Checking for the latest version of the cert-manager-init chart
          latest_cert_manager=$(helm search repo oda-canvas-api-gateway/cert-manager-init --versions | awk 'NR==2 {print $2}')
          if [ -z "$latest_cert_manager" ]; then
            echo "Error: cert-manager-init chart release was not successful."
            exit 1
          else
            echo "cert-manager-init chart released successfully. Version: $latest_cert_manager"
          fi

          # Checking for the latest version of the canvas-vault chart
          latest_canvas_vault=$(helm search repo oda-canvas-api-gateway/canvas-vault --versions | awk 'NR==2 {print $2}')
          if [ -z "$latest_canvas_vault" ]; then
            echo "Error: canvas-vault chart release was not successful."
            exit 1
          else
            echo "canvas-vault chart released successfully. Version: $latest_canvas_vault"
          fi

          # Checking for the latest version of the canvas-oda chart
          latest_canvas_oda=$(helm search repo oda-canvas-api-gateway/canvas-oda --versions | awk 'NR==2 {print $2}')
          if [ -z "$latest_canvas_oda" ]; then
            echo "Error: canvas-oda chart release was not successful."
            exit 1
          else
            echo "canvas-oda chart released successfully. Version: $latest_canvas_oda"
          fi
          echo "All charts released successfully."

      - name: Sleep for 60 seconds
        run: sleep 60

  release-api-gateway:
    runs-on: ubuntu-latest
    needs: delay-for-canvas-chart-release
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Configure Helm for API Gateway
        run: |
          cd ./charts/canvas-api-gateway/combined-api-gateway-chart
          helm dependency update
          # Update dependencies for apisix-gateway chart
          cd apisix-gateway
          # Update dependencies for kong-gateway chart
          helm dependency update
          cd ../kong-gateway
          helm dependency update
          
      - name: Run chart-releaser for API Gateway
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: ./charts/canvas-api-gateway
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"


  check-new-release:
    runs-on: ubuntu-latest
    needs: release-api-gateway
    steps:
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
          uname -m
  
      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
  
      - name: Create kind cluster
        run: |
          kind create cluster
          kubectl get nodes --show-labels
          
      - name: Download Kind LB Cloud Provider
        run: |
         git clone https://github.com/kubernetes-sigs/cloud-provider-kind.git
         cd cloud-provider-kind && make
         bin/cloud-provider-kind &
  
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          kubectl get ns
  
      - name: Install helm-git
        run: |
          helm plugin install https://github.com/aslafy-z/helm-git.git
  
      - name: Install istio Helm chart
        run: |
         helm repo add istio https://istio-release.storage.googleapis.com/charts
         helm repo update
         kubectl create namespace istio-system
         helm install istio-base istio/base -n istio-system
         helm install istiod istio/istiod -n istio-system --wait
         kubectl create namespace istio-ingress
         kubectl label namespace istio-ingress istio-injection=enabled
         helm install istio-ingress istio/gateway -n istio-ingress --set labels.app=istio-ingress --set labels.istio=ingressgateway

      - name: Install Helm chart from Git repo
        run: |
          helm repo add oda-canvas-api-gateway https://rj-acc.github.io/oda-canvas-api-gateway
          helm repo update
          # This below ensure we are checking current release not only stable release
          helm install canvas oda-canvas-api-gateway/canvas-oda -n canvas --create-namespace --devel

      - name: Check if deployment was successful
        run: |
          if kubectl get pods -n canvas | grep -q "Running"; then
            echo "Helm installation and deployment successful. All pods are running."
          else
            echo "Error: Deployment failed. Not all pods are running."
            exit 1
          fi
  
      - name: Port Forwarding Keycloak Service
        run: |
          sleep 30
          kubectl -n canvas port-forward svc/canvas-keycloak 8083:8083 &
  
      - name: Installing components PC & PI
        run: |
          helm repo add oda-components https://tmforum-oda.github.io/reference-example-components/
          helm install pc oda-components/productcatalog -n components
  
      - name: Check status of deployments
        run: |
          echo "Waiting for resources to be ready..."
          sleep 90
          LOG_FILE="/tmp/kubernetes_status.log"
          HELM_LOG_FILE="/tmp/helm_installation.log"
          echo "Current Kubernetes context:" | tee -a "$LOG_FILE"
          kubectl config current-context | tee -a "$LOG_FILE"
          echo "Fetching resources in the 'canvas' namespace:" | tee -a "$LOG_FILE"
          kubectl get all -n canvas | tee -a "$LOG_FILE" || echo "No resources found in 'canvas' namespace." | tee -a "$LOG_FILE"
          echo "Fetching resources in the 'components' namespace:" | tee -a "$LOG_FILE"
          kubectl get all -n components | tee -a "$LOG_FILE" || echo "No resources found in 'components' namespace." | tee -a "$LOG_FILE"
          echo "Fetching resources in the 'istio-ingress' namespace:" | tee -a "$LOG_FILE"
          kubectl get all -n istio-ingress | tee -a "$LOG_FILE" || echo "No resources found in 'istio-ingress' namespace." | tee -a "$LOG_FILE"
          echo "Fetching resources in the 'istio-system' namespace:" | tee -a "$LOG_FILE"
          kubectl get all -n istio-system | tee -a "$LOG_FILE" || echo "No resources found in 'istio-system' namespace." | tee -a "$LOG_FILE"
          echo "Fetching ExposedAPIs in the 'components' namespace:" | tee -a "$LOG_FILE"
          kubectl get exposedapis -n components | tee -a "$LOG_FILE" || echo "No ExposedAPIs found in 'components' namespace." | tee -a "$LOG_FILE"
          echo "Fetching components in the 'components' namespace:" | tee -a "$LOG_FILE"
          kubectl get components -n components | tee -a "$LOG_FILE" || echo "No components found in 'components' namespace." | tee -a "$LOG_FILE"
          helm list --all-namespaces | tee "$HELM_LOG_FILE"

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: |
            /tmp/helm_installation.log
            /tmp/kubernetes_status.log
  
      - name: Delete kind cluster
        if: always()
        run: |
          kind delete cluster
        
      - name: Check Kubernetes resource status
        run: |
          LOG_FILE="/tmp/kubernetes_status.log"
          echo "Checking the entire Kubernetes log for failures..."
          
          if grep -i -E 'failed|CrashLoopBackOff|error' "$LOG_FILE"; then
            echo "There are Kubernetes resource failures in this release!"
            exit 1
          else
            echo "OK, no Kubernetes resource failures observed."
          fi

      - name: Check Helm installation status
        run: |
          HELM_LOG_FILE="/tmp/helm_installation.log"
          echo "Checking the entire Helm log for failures..."
          
          if grep -i -E 'failed|error' "$HELM_LOG_FILE"; then
            echo "There are Helm installation failures in this release!"
            exit 1
          else
            echo "OK, no Helm installation failures observed with this release."
          fi
